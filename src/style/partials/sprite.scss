/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$calendar-ico-name: 'calendar-ico';
$calendar-ico-x: 0px;
$calendar-ico-y: 0px;
$calendar-ico-offset-x: 0px;
$calendar-ico-offset-y: 0px;
$calendar-ico-width: 19px;
$calendar-ico-height: 16px;
$calendar-ico-total-width: 75px;
$calendar-ico-total-height: 631px;
$calendar-ico-image: '../pic/design/sprite.png';
$calendar-ico: (0px, 0px, 0px, 0px, 19px, 16px, 75px, 631px, '../pic/design/sprite.png', 'calendar-ico', );
$camers-name: 'camers';
$camers-x: 0px;
$camers-y: 36px;
$camers-offset-x: 0px;
$camers-offset-y: -36px;
$camers-width: 32px;
$camers-height: 35px;
$camers-total-width: 75px;
$camers-total-height: 631px;
$camers-image: '../pic/design/sprite.png';
$camers: (0px, 36px, 0px, -36px, 32px, 35px, 75px, 631px, '../pic/design/sprite.png', 'camers', );
$home-name: 'home';
$home-x: 0px;
$home-y: 91px;
$home-offset-x: 0px;
$home-offset-y: -91px;
$home-width: 29px;
$home-height: 34px;
$home-total-width: 75px;
$home-total-height: 631px;
$home-image: '../pic/design/sprite.png';
$home: (0px, 91px, 0px, -91px, 29px, 34px, 75px, 631px, '../pic/design/sprite.png', 'home', );
$mess-name: 'mess';
$mess-x: 0px;
$mess-y: 145px;
$mess-offset-x: 0px;
$mess-offset-y: -145px;
$mess-width: 40px;
$mess-height: 28px;
$mess-total-width: 75px;
$mess-total-height: 631px;
$mess-image: '../pic/design/sprite.png';
$mess: (0px, 145px, 0px, -145px, 40px, 28px, 75px, 631px, '../pic/design/sprite.png', 'mess', );
$next-name: 'next';
$next-x: 0px;
$next-y: 193px;
$next-offset-x: 0px;
$next-offset-y: -193px;
$next-width: 19px;
$next-height: 34px;
$next-total-width: 75px;
$next-total-height: 631px;
$next-image: '../pic/design/sprite.png';
$next: (0px, 193px, 0px, -193px, 19px, 34px, 75px, 631px, '../pic/design/sprite.png', 'next', );
$plai-name: 'plai';
$plai-x: 0px;
$plai-y: 247px;
$plai-offset-x: 0px;
$plai-offset-y: -247px;
$plai-width: 69px;
$plai-height: 69px;
$plai-total-width: 75px;
$plai-total-height: 631px;
$plai-image: '../pic/design/sprite.png';
$plai: (0px, 247px, 0px, -247px, 69px, 69px, 75px, 631px, '../pic/design/sprite.png', 'plai', );
$slid-next-name: 'slid-next';
$slid-next-x: 0px;
$slid-next-y: 336px;
$slid-next-offset-x: 0px;
$slid-next-offset-y: -336px;
$slid-next-width: 40px;
$slid-next-height: 74px;
$slid-next-total-width: 75px;
$slid-next-total-height: 631px;
$slid-next-image: '../pic/design/sprite.png';
$slid-next: (0px, 336px, 0px, -336px, 40px, 74px, 75px, 631px, '../pic/design/sprite.png', 'slid-next', );
$slid-prev-name: 'slid-prev';
$slid-prev-x: 0px;
$slid-prev-y: 430px;
$slid-prev-offset-x: 0px;
$slid-prev-offset-y: -430px;
$slid-prev-width: 40px;
$slid-prev-height: 74px;
$slid-prev-total-width: 75px;
$slid-prev-total-height: 631px;
$slid-prev-image: '../pic/design/sprite.png';
$slid-prev: (0px, 430px, 0px, -430px, 40px, 74px, 75px, 631px, '../pic/design/sprite.png', 'slid-prev', );
$time-name: 'time';
$time-x: 0px;
$time-y: 524px;
$time-offset-x: 0px;
$time-offset-y: -524px;
$time-width: 22px;
$time-height: 21px;
$time-total-width: 75px;
$time-total-height: 631px;
$time-image: '../pic/design/sprite.png';
$time: (0px, 524px, 0px, -524px, 22px, 21px, 75px, 631px, '../pic/design/sprite.png', 'time', );
$tur-3d-name: 'tur-3d';
$tur-3d-x: 0px;
$tur-3d-y: 565px;
$tur-3d-offset-x: 0px;
$tur-3d-offset-y: -565px;
$tur-3d-width: 75px;
$tur-3d-height: 66px;
$tur-3d-total-width: 75px;
$tur-3d-total-height: 631px;
$tur-3d-image: '../pic/design/sprite.png';
$tur-3d: (0px, 565px, 0px, -565px, 75px, 66px, 75px, 631px, '../pic/design/sprite.png', 'tur-3d', );
$spritesheet-width: 75px;
$spritesheet-height: 631px;
$spritesheet-image: '../pic/design/sprite.png';
$spritesheet-sprites: ($calendar-ico, $camers, $home, $mess, $next, $plai, $slid-next, $slid-prev, $time, $tur-3d, );
$spritesheet: (75px, 631px, '../pic/design/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Here are example usages in HTML:

`display: block` sprite:
<div class="icon-home"></div>

`display: inline-block` sprite:
<img class="icon-home" />
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
